openapi: 3.0.1
info:
  title: ZHistLex Dictionary API
  version: 0.0.4
  license:
    name: GNU General Public License, version 2
    url: 'https://www.gnu.org/licenses/old-licenses/gpl-2.0.html'
  contact:
    name: ZHistLex – eHumanities Centre for Historical Lexikography (Work Package 2)
    url: 'http://zhistlex.de/'
  description: >
    # Overview


    This API specification describes the webservice for accessing lexical
    resources used by the ZHistLex project. 

servers:
  - url: 'http://urts55.uni-trier.de:8111/api/AWB'
  - url: 'http://urts55.uni-trier.de:8111/api/BMZ'
  - url: 'http://urts55.uni-trier.de:8111/api/DWB'
  - url: 'http://urts55.uni-trier.de:8111/api/Lexer'
tags:
  - name: General Functions
    description: ''
  - name: Retrieving Content
    description: ''
paths:
  /:
    get:
      operationId: aboutInfo
      summary: >
        Provides general information about the API. Implementations are free to
        return e.g. version information of implementations or statistics about
        the data that is accessable through the API.
      tags:
        - General Functions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: { info: "ZHistLex Dictionary API 0.0.1" }
            text/html:
              schema:
                type: string
                example: <html><title/>…</html>
  '/dictionaries':
    get:
      operationId: dictionaryInfo
      summary: |
        Provides general information about the dictionary represented by the webservice.
      tags:
        - General Functions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: { info: "…" }
            text/html:
              schema:
                type: string
                example: <html><title/>…</html>
  '/dictionaries/entries{filter1}':
    get:
      operationId: getEntries
      summary: |
        Provides a list of entries from a dictionary that match the criteria provided as `filter`.
      tags:
        - Retrieving Content
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/filter1'
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listOfLexicographicElements'
        '404':
          $ref: '#/components/responses/resourceNotFound'
  
  '/dictionaries/entries{filter1}/lemmas{filter2}':
    get:
      operationId: getLemmas
      summary: |
        Provides a list of lemmas from a dictionary that match the criteria provided as `filter`.
      tags:
        - Retrieving Content
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/filter1'
        - $ref: '#/components/parameters/filter2'
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listOfLexicographicElements'
        '404':
          $ref: '#/components/responses/resourceNotFound'
  '/dictionaries/entries{filter1}/definitions{filter2}':
    get:
      operationId: getDefinitions
      summary: |
        Provides a list of definitions from a dictionary that match the criteria provided as `filter`.
      tags:
        - Retrieving Content
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/filter1'
        - $ref: '#/components/parameters/filter2'
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listOfLexicographicElements'
        '404':
          $ref: '#/components/responses/resourceNotFound'
  '/dictionaries/entries{filter1}/citations{filter2}':
    get:
      operationId: getCitations
      summary: |
        Provides a list of citations from a dictionary that match the criteria provided as `filter`.
      tags:
        - Retrieving Content
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/filter1'
        - $ref: '#/components/parameters/filter2'
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listOfLexicographicElements'
        '404':
          $ref: '#/components/responses/resourceNotFound'
  '/dictionaries/entries{filter1}/etymologies{filter2}':
    get:
      operationId: getEtymologies
      summary: |
        Provides a list of etymologies from a dictionary that match the criteria provided as `filter`.
      tags:
        - Retrieving Content
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/filter1'
        - $ref: '#/components/parameters/filter2'
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listOfLexicographicElements'
        '404':
          $ref: '#/components/responses/resourceNotFound'
components:
  parameters:
    filter1:
      name: filter1
      in: path
      description: |
        Specifies the filtering criteria for selecting specific lexicographic data from the dictionary.
      required: true
      style: matrix
      explode: true
      schema:
        $ref: '#/components/schemas/filter'
    filter2:
      name: filter2
      in: path
      description: |
        Specifies the filtering criteria for selecting specific lexicographic data from the dictionary.
      required: true
      style: matrix
      explode: true
      schema:
        $ref: '#/components/schemas/filter'
    limit:
      name: limit
      in: query
      description: |
        Specifies the maximum number of records to be returned. Implementations are free to override the value of `limit` to match site-specific restrictions.
      required: false
      schema:
        type: integer
        minimum: 0
        default: 10
    offset:
      name: offset
      in: query
      description: |
        Specifies the index of the requested `lexicographicElement` within a `listOfLexicographicElements`.
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
  responses:
    resourceNotFound:
      description: The specified resource could not be found.
    unexpectedError:
      description: An unexpected error occurred.
  schemas:
    filter:
      type: object
      description: |
        Represents a set of properties for selecting lexicographic data. All properties may be freely combined. Implementations should consider contradicting properties (such as a definitions that contain entries) as specifications for non-existing lexicographic data.
      properties:
        fulltext:
          type: string
          description: |
            Specifies a full text search term for searches across all entries.
          example: null
        regex:
          type: string
          description: |
            Specifies a regular expression based search term for searches
            across all entries. The regular expression should follow Perl-style syntax.
          example: "h[äa]us"
        lemma:
          type: string
          description: |
            Specifies a lemma either by providing a literal string or a regular expression.
        definition:
          type: string
          description: |
            Specifies a definition either by providing a literal string or a regular expression.
          example: "fulltext(Haus)"
        citation:
          type: string
          description: |
            Specifies a citation either by providing a literal string or a regular expression.
          example: "regex(G(oe|ö)th?e)"
        etymology:
          type: string
          description: | 
            Specifies an etymology either by providing a literal string or a regular expression.
          example: "fulltext(derived from)"
        lang:
          type: string
          description: |
            Specifies the language of the elements as a filter criterion. Languages are specified according to BCP 47 (see https://tools.ietf.org/html/bcp47).
          example: "de"
        version:
          type: string
          description: |
            (Reserved for future use.) Specifies the version of the elements.
          example: "1.0.0"
    lexicographicElement:
      type: string
      description: |
        Represents a single lexicographic element in a TEI representation. Note that "TEI representation" will be more rigidly defined as "TEI-Lex-0 representation" in the future.
    listOfLexicographicElements:
      type: array
      description: |
        Represents a set of retrieved lexical elements.
      items:
        $ref: '#/components/schemas/lexicographicElement'
